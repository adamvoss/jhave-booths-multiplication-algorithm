package jhave.client.igcomponent;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.BorderLayout;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.FocusListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

import java.util.*;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JComboBox;

import org.jdom.Element;

/**
* A text area which listens to other text areas, updating when the other text areas have.
* Probably for the domain of Booth's Algorithm only, because the code is not generic
* @author Christopher Jenkins <cjenkin1@tmail.com>
* @author Adam Voss <vossad01@luther.edu>
*/

public class IGBoothsMultiplication extends IGComponent {

    private static Random rand = new Random();

    /**The panel which holds all the sub-components of this component*/
    protected JPanel panel;

    /**The JComponent label of this component*/
    protected JLabel label = null;

    /**The name of the element which represents the label for this component*/
    public static final String LABEL_ELEMENT_NAME  = "label_line";

    /**The name of the element which serves to describe the use of the input generator to the user.*/
    public static final String DESCRIPTION_ELEMENT = "description"  ;

    /*non-javadoc The text that goes in the description element*/
    private static      String descriptiveText;

    /**The name of the element which represents a binary/decimal textfield pair*/
    public static final String LTEXTFIELDS = "l_textfields";

    /**Indicates the beginning of a sequence of ROW_ELEMENTs*/
    public static final String ROWS_ELEMENT= "rows";

    /**All subelements of this element should be displayed on the same horizontal level in the GUI*/
    public static final String ROW_ELEMENT = "row"; 

   /**The name of the element which represents a text-field*/
    public static final String TEXTFIELD = "textfield";

    /**The name of the element which represents an empty row*/
    public static final String BLANK_ROW_ELEMENT_NAME = "blank" ;
    
    //the following are all elements of l_textfields
    public static final String LTF_NAME        = "name"         ;
    public static final String LTF_DEFAULT_DEC = "default_dec"  ;
    public static final String LTF_DEFAULT_BIN = "default_bin"  ;
    public static final String LTF_PARTNER     = "bin_partner"  ;
    public static final String LTF_ENTERED_VAL = "value_entered";
 
    //values of the defaults of l_textfields
    public static       String[] defaultDec;
    public static       String[] defaultBin;
   
    private static ListeningManager manager;

    public static enum BoothType {STANDARD, EXERCISE01, EXERCISE02, EXERCISE03}
    private BoothType myType;

    private static boolean debug = false;

    public IGBoothsMultiplication(Element root, IGComponentFactory factory) throws IGComponentInstantiationException {
        super(root, factory);

        System.out.println("IGBoothsMultiplication initialized");

        Iterator booth_iter = root.getChildren().iterator();

        while (booth_iter.hasNext() ) {
            Element booth_child = (Element) booth_iter.next();

            if (booth_child.getName().equalsIgnoreCase(LABEL_ELEMENT_NAME) ) {
                //this.label = new JLabel(ltxt_child.getText() );
                if (booth_child.getText().contains("Exercise 1") ) {
                    myType = BoothType.EXERCISE01;
                    assembleE1(root);
                }
                else if (booth_child.getText().contains("Exercise 2") ) {
                    myType = BoothType.EXERCISE02;
                    assembleE2(root);
                }
                else if (booth_child.getText().contains("Exercise 3") ) {
                    if(debug) System.out.println("Recognized Exercise 3");
                    myType = BoothType.EXERCISE03;
                    assembleE3(root);
                }
                else {
                    myType = BoothType.STANDARD;
                    assembleBM(root);
                }
            }
        }
    }

    private void assembleE1(Element root) {
        Iterator booth_iter = root.getChildren().iterator();
        BorderLayout border = new BorderLayout();
        GridLayout   grid   = new GridLayout(5, 1);
        JPanel descriptivePanel = new JPanel(grid);
        panel = new JPanel(border);
        JLabel descriptiveArea = new JLabel();
        JLabel[] cautionaryArea  = new JLabel[3];

        String decM = ListeningManager.toDecimal(nDigitBinary(8) );
        String decQ = ListeningManager.toDecimal(nDigitBinary(8) );

        descriptiveText = "Initialize Booth's Algorithm for the multiplication of " + decM + 
            " (M) and " + decQ + " (Q)";
        descriptiveArea.setText(descriptiveText);

        for (int i = 0; i < 3; ++i)
            cautionaryArea[i] = new JLabel();

        cautionaryArea[0].setText("You may use at most 8 bits to represent binary values");
        cautionaryArea[1].setText("Make sure to be consistent with the number of bits in each of the three registers");
        cautionaryArea[2].setText("");//a lazy way to add a blank item to a panel

        while (booth_iter.hasNext() ) {
            Element booth_child = (Element) booth_iter.next();

            if (booth_child.getName().equalsIgnoreCase(LABEL_ELEMENT_NAME) ) {
                this.label = new JLabel(booth_child.getText() );
            }
            else if (booth_child.getName().equalsIgnoreCase(ROWS_ELEMENT) ) {
                panel.add(buildRowsPanel(booth_child), BorderLayout.CENTER);
            }
        }

        descriptivePanel.add(descriptiveArea);
        descriptivePanel.add(new JLabel("") );

        for (JLabel jl : cautionaryArea)
            descriptivePanel.add(jl);

        panel.add(descriptivePanel, BorderLayout.NORTH);
    }

    private void assembleE2(Element root) {
        Iterator booth_iter = root.getChildren().iterator();
        BorderLayout border = new BorderLayout();
        GridLayout grid     = new GridLayout(7, 1);
        JPanel descriptivePanel = new JPanel(grid);
        panel = new JPanel(border);
        JLabel[] descriptiveArea = new JLabel[7];

        String decM = ListeningManager.toDecimal(nDigitBinary(5) );
        String decQ = ListeningManager.toDecimal(nDigitBinary(8) );

        descriptiveText = "Initialize Booth's Algorithm for the multiplication of " + decM + 
            " (M) and " + decQ + " (Q)";
        descriptiveArea[0] = new JLabel(descriptiveText);
        descriptiveArea[1] = new JLabel("Then, give the states for the values below at the end of each iteration of the algorithm's loop");
        descriptiveArea[2] = new JLabel(" ");
        descriptiveArea[3] = new JLabel("You may not need all of the fields provided");
        descriptiveArea[4] = new JLabel("You may use at most 8 bits to represent binary values");
        descriptiveArea[5] = new JLabel("Make sure to be consistent with the number of bits in each of the three registers");
        descriptiveArea[6] = new JLabel(" ");
        
        while (booth_iter.hasNext() ) {
            Element booth_child = (Element) booth_iter.next();

            if (booth_child.getName().equalsIgnoreCase(LABEL_ELEMENT_NAME) ) {
                this.label = new JLabel(booth_child.getText() );
            }
            else if (booth_child.getName().equalsIgnoreCase(ROWS_ELEMENT) ) {
                panel.add(buildRowsPanel(booth_child), BorderLayout.CENTER);
            }
        }

        for (JLabel jl : descriptiveArea)
            descriptivePanel.add(jl);

        panel.add(descriptivePanel, BorderLayout.NORTH);
    }

    private void assembleE3(Element root) {
        Iterator ltxt_iter = root.getChildren().iterator();
        BorderLayout border = new BorderLayout();
        GridLayout grid     = new GridLayout(4, 3, 3, 3);
        panel = new JPanel(border);
        JPanel centerPanel = new JPanel(grid);
        JLabel descriptiveArea = new JLabel();

        defaultBin = new String[2];
        defaultDec = new String[2];

        int caseSize = 3 + rand.nextInt(6);

        defaultBin[0] = ListeningManager.signExtend("0", caseSize - 1);
        defaultBin[1] = defaultBin[0];

        defaultDec[0] = "0";
        defaultDec[1] = "0";

        while (ltxt_iter.hasNext() ) {
            Element ltxt_child = (Element) ltxt_iter.next();

            if (ltxt_child.getName().equalsIgnoreCase(LABEL_ELEMENT_NAME) ) {
                this.label = new JLabel(ltxt_child.getText() );
            }
            else if (ltxt_child.getName().equalsIgnoreCase(DESCRIPTION_ELEMENT) ) {
                descriptiveText = ltxt_child.getText();
                descriptiveArea.setText(descriptiveText + " " + caseSize);
            }

            else if (ltxt_child.getName().equalsIgnoreCase(LTEXTFIELDS) ) ; //awkward silence
        }

        manager = new ListeningManager(Integer.parseInt(defaultDec[0]), Integer.parseInt(defaultDec[1] ));
        manager.getComboBox().setSelectedIndex(caseSize - 2);

        JTextField[] tFields = manager.getTextFields();
        centerPanel.add(new JLabel(" ")); //still a lazy way to add a blank item to grid
        centerPanel.add(new JLabel("Decimal"));
        centerPanel.add(new JLabel("Two's Complement Binary"));
        centerPanel.add(new JLabel("Multiplicand"));
        centerPanel.add(tFields[1]);//multiplicand binText
        centerPanel.add(tFields[0]);//multiplicand decText
        centerPanel.add(new JLabel("Multiplier") );
        centerPanel.add(tFields[3]);//multiplier binText
        centerPanel.add(tFields[2]);//multiplier decText
        centerPanel.add(new JLabel(""));
        centerPanel.add(new JLabel(""));
        centerPanel.add(manager.getError() );

        panel.add(centerPanel, BorderLayout.CENTER);
        panel.add(descriptiveArea, BorderLayout.NORTH);

        panel.add(centerPanel, BorderLayout.CENTER);
        panel.add(descriptiveArea, BorderLayout.NORTH);
    }

    private JPanel buildRowsPanel(Element rows) {
        Iterator rows_iter = rows.getChildren().iterator();
        GridLayout grid = new GridLayout(rows.getChildren().size(), 1);
        JPanel rowsPanel = new JPanel(grid);

        while (rows_iter.hasNext() ) {
            Element rows_child = (Element) rows_iter.next();

            if (rows_child.getName().equalsIgnoreCase(ROW_ELEMENT) ) {
                rowsPanel.add(buildLinePanel(rows_child) );
            }
        }

        return rowsPanel;
    }

    private JPanel buildLinePanel(Element line) {
        Iterator line_iter = line.getChildren().iterator();
        GridLayout grid = new GridLayout(1, line.getChildren().size() - 1);//value entered element not displayed
        JPanel linePanel = new JPanel(grid);

        while (line_iter.hasNext() ) {
            Element line_child = (Element) line_iter.next();

            if (line_child.getName().equalsIgnoreCase(TEXTFIELD) ) {
                linePanel.add(new JTextField("") );
            }
            else if (line_child.getName().equalsIgnoreCase(LABEL_ELEMENT_NAME) ) {
                linePanel.add(new JLabel(line_child.getText() ));
            }
            else if (line_child.getName().equalsIgnoreCase(BLANK_ROW_ELEMENT_NAME) ) {
                linePanel.add(new JLabel(" ") );
            }
        }

        return linePanel;
    }

    private void assembleBM(Element root) {
        Iterator ltxt_iter = root.getChildren().iterator();
        BorderLayout border = new BorderLayout();
        GridLayout grid = new GridLayout(4, 3, 3, 3);
        panel = new JPanel(border);
        JPanel centerPanel = new JPanel(grid);
        JLabel descriptiveArea = new JLabel();

        defaultBin = new String[2];
        defaultDec = new String[2];

        defaultBin[1] = constrainedRandomBinary();
        defaultBin[0] = nDigitBinary(defaultBin[1].length() );

        defaultDec[0] = ListeningManager.toDecimal(defaultBin[0]);
        defaultDec[1] = ListeningManager.toDecimal(defaultBin[1]);

        while (ltxt_iter.hasNext() ) {
            Element ltxt_child = (Element) ltxt_iter.next();

            if (ltxt_child.getName().equalsIgnoreCase(LABEL_ELEMENT_NAME) ) {
                this.label = new JLabel(ltxt_child.getText() );
            }
            else if (ltxt_child.getName().equalsIgnoreCase(DESCRIPTION_ELEMENT) ) {
                descriptiveText = ltxt_child.getText();
                descriptiveArea.setText(descriptiveText);
            }

            else if (ltxt_child.getName().equalsIgnoreCase(LTEXTFIELDS) ) {
                //Awkward silence
            }
        }

        manager = new ListeningManager(Integer.parseInt(defaultDec[0]), Integer.parseInt(defaultDec[1] ));

        JTextField[] tFields = manager.getTextFields();
        centerPanel.add(new JLabel(" ")); //A lazy way to add a blank item to grid
        centerPanel.add(new JLabel("Decimal"));
        centerPanel.add(new JLabel("Two's Complement Binary"));
        centerPanel.add(new JLabel("Multiplicand"));
        centerPanel.add(tFields[1]);//multiplicand binText
        centerPanel.add(tFields[0]);//multiplicand decText
        centerPanel.add(new JLabel("Multiplier"));
        centerPanel.add(tFields[3]);//multiplier   binText
        centerPanel.add(tFields[2]);//multiplier   decText
        centerPanel.add(new JLabel("Select how many bits to use:"));        
        centerPanel.add(manager.getComboBox() );
        centerPanel.add(manager.getError() );

        panel.add(centerPanel, BorderLayout.CENTER);
        panel.add(descriptiveArea, BorderLayout.NORTH);
    }

    @Override
    public Element getJDOMElement() { //needs some work with nested attributes.
        if      (myType == BoothType.STANDARD)      return getBoothsStandardElement();
        else if (myType == BoothType.EXERCISE01)    return getBoothsEx01()           ;
        else if (myType == BoothType.EXERCISE02)    return getBoothsEx01()           ;
        else if (myType == BoothType.EXERCISE03)    return getBoothsStandardElement();
        else return null;
    }

    private Element getBoothsEx01() {
        Element thisElement = new Element(this.factory.getElementNameForClass(this.getClass() ));

        Element labelElement = new Element(LABEL_ELEMENT_NAME);
        labelElement.setText(this.label.getText() );

        ArrayList<String> enteredValues = new ArrayList<String>();

        //BEGIN ROWS_ELEMENT
        Element rowsElement = new Element(ROWS_ELEMENT);

        System.out.println(panel.getComponents()[0] instanceof JPanel);
        JPanel rowsPanel = (JPanel) panel.getComponents()[0];

        for (int i = 0; i < rowsPanel.getComponentCount(); ++i) {
            System.out.println("" + i + "\t" + (rowsPanel.getComponents()[i] instanceof JPanel) );
            JPanel rowPanel = (JPanel) rowsPanel.getComponents()[i];
            Element rowElement = new Element(ROW_ELEMENT);

            for (int j = 0; j < rowPanel.getComponentCount(); ++j) {
                Element rowChildElement;
                Component comp = rowPanel.getComponents()[j];

                if (comp instanceof JLabel) {
                    rowChildElement = new Element(LABEL_ELEMENT_NAME);
                    rowChildElement.setText( ((JLabel) comp).getText() );
                }
                else if (comp instanceof JTextField) {
                    rowChildElement = new Element(TEXTFIELD);
                    Element valueElement = new Element(ENTERED_VALUE_ELEMENT_NAME);
                    valueElement.setText( ((JTextField) comp).getText().trim() );
                    enteredValues.add(valueElement.getText() );
                    rowChildElement.addContent(valueElement);
                }
                else {
                    System.out.println("Unknown element of row!!!");
                    rowChildElement = new Element("unknown");
                }
                rowElement.addContent(rowChildElement);
            }

            rowsElement.addContent(rowElement);
        }

        //END ROWS_ELEMENT
        
        Element enteredElement = new Element(ENTERED_VALUE_ELEMENT_NAME);
        String concatReduce = "";

        System.out.println(enteredValues.size() );

        for (String enteredValue : enteredValues)//error checking - INVALID if contains space or length 0
            concatReduce += (enteredValue.contains(" ") || enteredValue.length() == 0 ? "INVALID " : enteredValue + " ");

        //parse out the original values to be multiplied
        Scanner msc = new Scanner(descriptiveText);

        for ( ; msc.hasNext(); msc.next() )
            if (msc.hasNextInt() ) 
                concatReduce += "" + msc.nextInt() + " ";

        enteredElement.setText(concatReduce.substring(0,concatReduce.length() - 1) );

        thisElement.addContent(labelElement);
        thisElement.addContent(rowsElement);
        thisElement.addContent(enteredElement);
        
        return thisElement;
    }

    private Element getBoothsStandardElement() {
        Element thisElement = new Element(this.factory.getElementNameForClass(this.getClass() ));

        Element labelElement = new Element(LABEL_ELEMENT_NAME);
        labelElement.setText(this.label.getText() );

        Element descriptiveElement = new Element(DESCRIPTION_ELEMENT);
        descriptiveElement.setText(descriptiveText);

        //BEGIN l_textFields
        Element lTextElementM = new Element(LTEXTFIELDS);
        Element lTextElementQ = new Element(LTEXTFIELDS);

        Element ltNameM       = new Element(LTF_NAME);
        ltNameM.setText("Multiplicand");
        Element ltNameQ       = new Element(LTF_NAME);
        ltNameQ.setText("Multiplier");
        lTextElementM.addContent(ltNameM);
        lTextElementQ.addContent(ltNameQ);

        Element ltPartnerM   = new Element(LTF_PARTNER);
        ltPartnerM.setText("Multiplier"  );
        Element ltPartnerQ   = new Element(LTF_PARTNER);
        ltPartnerQ.setText("Multiplicand");
        lTextElementM.addContent(ltPartnerM);
        lTextElementQ.addContent(ltPartnerQ);

        Element ltEnteredM   = new Element(LTF_ENTERED_VAL);
        ltEnteredM.setText(manager.multiplicand.binText.getText() );
        Element ltEnteredQ   = new Element(LTF_ENTERED_VAL);
        ltEnteredQ.setText(manager.multiplier.binText.getText() );//TODO ugly hack is ugly
        lTextElementM.addContent(ltEnteredM);
        lTextElementQ.addContent(ltEnteredQ);
        //END l_textfields

        Element enteredElement = new Element(ENTERED_VALUE_ELEMENT_NAME);
        enteredElement.setText(ltEnteredM.getText() + " " + ltEnteredQ.getText() );

        //Now set for return
        thisElement.addContent(labelElement)      ;
        thisElement.addContent(descriptiveElement);
        thisElement.addContent(lTextElementM)     ;
        thisElement.addContent(lTextElementQ)     ;
        thisElement.addContent(enteredElement)    ;

        return thisElement;
    }

    @Override
    public JComponent[] getJComponents() {
        return new JComponent[] {this.label, this.panel};
    }

    private static String constrainedRandomBinary() {
        int numBits = rand.nextInt(5) + 4;//only 4-8 bit numbers

        String res = "";
        boolean bitValue = rand.nextBoolean();
        int i = 0;

        while (i < numBits - 2) {
            int thisMany = Math.min(rand.nextInt(bitValue ? 3 : 2) + 1, (numBits - 2 - i) );
            int j = 0;
            
            for ( ; j < thisMany; ++j)
                res = (bitValue ? "1" : "0") + res;
            
            i += j;
            
            bitValue = !bitValue;
        }

        res = (bitValue ? "01" : "10") + res;
        return res;
    }

    private static String nDigitBinary(int n) {
        int ret = rand.nextInt((int)Math.pow(2, n) ) - ((int) Math.pow(2, n-1) );

        return ListeningManager.toBinary((ret == 0 ? ret + (rand.nextInt(2) == 0 ? 1 : -1) : ret) );
    }
}

class ListeningManager {
    TextChunkListener multiplicand;
    TextChunkListener multiplier;
    JLabel error = new JLabel("");
    
    String regSize = "Automatic";

    public static final int TEXT_LENGTH = 20;

    public ListeningManager(int multiplicand, int multiplier) {
        this.multiplicand = new TextChunkListener(multiplicand, error);
        this.multiplier   = new TextChunkListener(multiplier, error);

        this.sizeAllTo("Automatic");
    }

    /**
	 * @return
	 */
	public Component getError() {
		return error;
	}

	public JTextField[] getTextFields() {
        return new JTextField[] {this.multiplicand.binText, this.multiplicand.decText, this.multiplier.binText, this.multiplier.decText};
    }

    private boolean wellFormedBinary(String input) {
        if (input.length() == 0) return false;

        boolean flag = true;

        for (int i = 0; i < input.length(); ++i)
            flag = flag && (input.charAt(i) == '0' || input.charAt(i) == '1');

        return flag;
    }

    private boolean wellFormedDecimal(String input) {
        try {
            Integer.parseInt(input);
            return true;
        } catch (NumberFormatException e) {return false;}
    }

    //Should have used Built-in support
    public static String toDecimal(String binstr) {
        int sum    = 0;
        int maxPow = 1;

        for (int i = 0; i < binstr.length(); ++i) {
            sum = (2 * sum) + binstr.charAt(i) - '0';
            maxPow *= 2;
        }

        //Two's complement madness
        return "" + ((sum < maxPow / 2) ? sum : (sum - maxPow) );
    }

    /**
    * Converts an int to its shortest-length two's complement binary representative
    */
    public static String toBinary(int a){
        if (a<0){
            return Integer.toBinaryString(a).replaceFirst("11*", "1");
        }
        //positive numbers are already shortest length
       return "0"+Integer.toBinaryString(a);
    }

    /**
    * Sign extends binStr by i bits
    */
    public static String signExtend(String binStr, int i){
        String firstBit = String.valueOf(binStr.charAt(0));
        String extension = "";
        while (i>0){extension = extension.concat(firstBit); i--;}
        return extension.concat(binStr);
    }

    private boolean validSizeOption(String size) {
        if (size.equals("Automatic") ) return true;

        int sz = Integer.parseInt(size);

        //Comparison on smallest representation.
        return sz >= smallestSizeAllowed();
    }

    private int smallestSizeAllowed() {
        return Math.max(toBinary(Integer.parseInt(multiplicand.decText.getText() )).length(),
            toBinary(Integer.parseInt(multiplier.decText.getText() )).length() );
    }

    private boolean validRegisterValue(String binNum) {
        if (regSize.equals("Automatic") ) return (binNum.length() < 9);

        else return binNum.length() <= Integer.parseInt(regSize);
    }

    private void sizeAllTo(String sizeT) {
        int size = 8;
        String[] temp = new String[2];

        if (sizeT.equals("Automatic")) {
            temp[0] = toBinary(Integer.parseInt(multiplicand.decText.getText() ));
            temp[1] = toBinary(Integer.parseInt(multiplier.decText.getText()   ));

            size = (temp[0].length() > temp[1].length() ? temp[0].length() : temp[1].length() );
            size = (size < 2 ? 2 : size);
        }
        else {
            temp[0] = multiplicand.binText.getText();
            temp[1] = multiplier.binText.getText();
            size = Integer.parseInt(sizeT);
        }

        for (int i = 0; i < temp.length; ++i) {
            if (temp[i].length() < size)
                temp[i] = signExtend(temp[i], size-temp[i].length() );

            else
                temp[i] = temp[i].substring(temp[i].length()-size);
        }

        multiplicand.binText.setText(temp[0]);
        multiplicand.oldBinText = temp[0];

        multiplier.binText.setText(temp[1]);
        multiplier.oldBinText = temp[1];
    }

    //!!!
    //THIS IS A BIG PROBLEM WAITING TO HAPPEN
    //THIS METHOD CAN ONLY BE CALLED ONCE! IT SHOULD RETURN AN OBJECT INITIALIZED BY THE CONSTRUCTER INSTEAD
    public JComboBox getComboBox() {
        String[]  lenOpts  = new String[] {"Automatic", "3", "4", "5", "6", "7", "8"};
        JComboBox lenCombo = new JComboBox(lenOpts);
        lenCombo.setSelectedIndex(0);
        lenCombo.setName("Register Size");
        lenCombo.addActionListener(new ComboListener(lenCombo, error) );

        return lenCombo;
    }
    
    class ComboListener implements ActionListener {

        private JComboBox combo;
        private int lastSelected;
        private JLabel errorLabel;

        public ComboListener(JComboBox cmb, JLabel error) {
            this.combo = cmb;
            this.lastSelected = cmb.getSelectedIndex();
            this.errorLabel = error;
        }

        public void actionPerformed(ActionEvent e) {
            String selected = (String)combo.getSelectedItem();
            if (!selected.equals(regSize) ) {
                regChange(selected);
            }
        }

        public void regChange(String selected) {
            if (!validSizeOption(selected) ) {
                errorLabel.setText("<html><font color=#FF0000>Too few bits attempted, requires " + smallestSizeAllowed() + "</html>");
                combo.setSelectedIndex(lastSelected);
            }
            else {
                regSize = selected;
                lastSelected = combo.getSelectedIndex();
                sizeAllTo(selected);
                errorLabel.setText("");
            }
        }
    }

    class TextChunkListener implements ActionListener, KeyListener, FocusListener {
        JTextField binText;
        JTextField decText;
        JLabel errorLabel;

        private String  oldBinText;
        private String  oldDecText;

        /**
        * Assumes default values are sane.
        *
        */
        public TextChunkListener(int value, JLabel error) {
            this.binText = new JTextField(TEXT_LENGTH);
            this.decText = new JTextField(TEXT_LENGTH);
            this.errorLabel = error;
            
            decText.setText("" + value);
            oldDecText = "" + value;

            oldBinText = toBinary(value);
            oldBinText = signExtend(oldBinText, 4 - oldBinText.length() );//ugly hack
            binText.setText(oldBinText);

            //adds itself to the textfields
            binText.addActionListener(this);
            binText.addFocusListener( this);
            binText.addKeyListener(   this);

            decText.addActionListener(this);
            decText.addFocusListener( this);
            decText.addKeyListener  ( this);
        }

        public JTextField[] getTextFields() {return new JTextField[] {this.binText, this.decText};}

        public void actionPerformed(ActionEvent e) {
            if (!oldBinText.equals(binText.getText() )) {
                binChange();
            } else if (!oldDecText.equals(decText.getText() )) {
                decChange();
            }
        }

        public void focusGained(FocusEvent e) {
            if (!oldBinText.equals(binText.getText() )) {
                binChange();
            } else if (!oldDecText.equals(decText.getText() )) {
                decChange();
            }

        }

        public void focusLost(FocusEvent e) {
            if (!oldBinText.equals(binText.getText() )) {
                binChange();
            } else if (!oldDecText.equals(decText.getText() )) {
                decChange();
            }
        }

        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_TAB) {
                if (!oldBinText.equals(binText.getText() )) {
                    binChange();
                } else if (!oldDecText.equals(decText.getText() )) {
                    decChange();
                }
            }
        }

        //Current actions are too coarse to allow for theses, though they would be nice
        //The main trouble case is the blank box, just the negative sign, and one-digit binary numbers
        public void keyReleased(KeyEvent e) {/*lol*/}

        public void keyTyped(KeyEvent e){/*lol*/}

        //TODO get rid of white space
        private void binChange() {
            if (!wellFormedBinary(binText.getText() ) ) {
                errorLabel.setText("<html><font color=#FF0000>Invalid binary integer</html>");
                binText.setText(oldBinText);
            } else if (!validRegisterValue(binText.getText() ) ){
                errorLabel.setText("<html><font color=#FF0000>Overflow, value " + toDecimal(binText.getText() ) + 
                    " requires " + toBinary(Integer.parseInt(toDecimal(binText.getText() )) ).length() + " bits</html>");
                int maxBits;
                if (regSize.equals("Automatic")) maxBits = 7;
                else maxBits = Integer.parseInt(regSize)-1;
                
                if (Integer.parseInt(decText.getText()) > 0) decText.setText(String.valueOf(((Double)(Math.pow(2, maxBits) - 1)).intValue()));
                else decText.setText(String.valueOf(((Double)(Math.pow(2, maxBits) * -1)).intValue()));
                
                binText.setText(toBinary(Integer.parseInt(decText.getText() )) );
            } else{
                errorLabel.setText("");
            }
            oldBinText = binText.getText();
            decText.setText("" + toDecimal(binText.getText() ) );
            oldDecText = decText.getText();
            sizeAllTo(regSize);
        }

        private void decChange() {
            if (!wellFormedDecimal(decText.getText() ) ) {
                errorLabel.setText("<html><font color=#FF0000>Invalid decimal integer</html>");
                decText.setText(oldDecText);
            } else if (!validRegisterValue(toBinary(Integer.parseInt(decText.getText() )) )) {
                errorLabel.setText("<html><font color=#FF0000>Overflow, value " + decText.getText() + 
                    " requires " + toBinary(Integer.parseInt(decText.getText() )).length() + "bits</html>");
                int maxBits;
                if (regSize.equals("Automatic")) maxBits = 7;
                else maxBits = Integer.parseInt(regSize)-1;
                
                if (Integer.parseInt(decText.getText()) > 0) decText.setText(String.valueOf(((Double)(Math.pow(2, maxBits) - 1)).intValue()));
                else decText.setText(String.valueOf(((Double)(Math.pow(2, maxBits) * -1)).intValue()));
            } else{
                errorLabel.setText("");
            }
            oldDecText = decText.getText();
            binText.setText(toBinary(Integer.parseInt(decText.getText() )) );
            oldBinText = binText.getText();
            sizeAllTo(regSize);
        }
    }
}
